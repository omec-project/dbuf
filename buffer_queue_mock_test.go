// Code generated by MockGen. DO NOT EDIT.
// Source: buffer_queue.go

// Package dbuf is a generated GoMock package.
package dbuf

import (
	gomock "github.com/golang/mock/gomock"
	. "github.com/omec-project/dbuf/api"
	net "net"
	reflect "reflect"
)

// MockBufferQueueInterface is a mock of BufferQueueInterface interface
type MockBufferQueueInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBufferQueueInterfaceMockRecorder
}

// MockBufferQueueInterfaceMockRecorder is the mock recorder for MockBufferQueueInterface
type MockBufferQueueInterfaceMockRecorder struct {
	mock *MockBufferQueueInterface
}

// NewMockBufferQueueInterface creates a new mock instance
func NewMockBufferQueueInterface(ctrl *gomock.Controller) *MockBufferQueueInterface {
	mock := &MockBufferQueueInterface{ctrl: ctrl}
	mock.recorder = &MockBufferQueueInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBufferQueueInterface) EXPECT() *MockBufferQueueInterfaceMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockBufferQueueInterface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockBufferQueueInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBufferQueueInterface)(nil).Start))
}

// Stop mocks base method
func (m *MockBufferQueueInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockBufferQueueInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBufferQueueInterface)(nil).Stop))
}

// RegisterSubscriber mocks base method
func (m *MockBufferQueueInterface) RegisterSubscriber(arg0 chan Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSubscriber", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSubscriber indicates an expected call of RegisterSubscriber
func (mr *MockBufferQueueInterfaceMockRecorder) RegisterSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscriber", reflect.TypeOf((*MockBufferQueueInterface)(nil).RegisterSubscriber), arg0)
}

// UnregisterSubscriber mocks base method
func (m *MockBufferQueueInterface) UnregisterSubscriber(arg0 chan Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterSubscriber", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterSubscriber indicates an expected call of UnregisterSubscriber
func (mr *MockBufferQueueInterfaceMockRecorder) UnregisterSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterSubscriber", reflect.TypeOf((*MockBufferQueueInterface)(nil).UnregisterSubscriber), arg0)
}

// GetState mocks base method
func (m *MockBufferQueueInterface) GetState() GetDbufStateResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(GetDbufStateResponse)
	return ret0
}

// GetState indicates an expected call of GetState
func (mr *MockBufferQueueInterfaceMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockBufferQueueInterface)(nil).GetState))
}

// GetQueueState mocks base method
func (m *MockBufferQueueInterface) GetQueueState(arg0 uint64) (GetQueueStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueState", arg0)
	ret0, _ := ret[0].(GetQueueStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueState indicates an expected call of GetQueueState
func (mr *MockBufferQueueInterfaceMockRecorder) GetQueueState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueState", reflect.TypeOf((*MockBufferQueueInterface)(nil).GetQueueState), arg0)
}

// ReleasePackets mocks base method
func (m *MockBufferQueueInterface) ReleasePackets(queueId uint32, dst *net.UDPAddr, drop, passthrough bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleasePackets", queueId, dst, drop, passthrough)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleasePackets indicates an expected call of ReleasePackets
func (mr *MockBufferQueueInterfaceMockRecorder) ReleasePackets(queueId, dst, drop, passthrough interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePackets", reflect.TypeOf((*MockBufferQueueInterface)(nil).ReleasePackets), queueId, dst, drop, passthrough)
}
