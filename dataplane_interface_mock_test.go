// Copyright 2020-present Open Networking Foundation
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

// Code generated by MockGen. DO NOT EDIT.
// Source: dataplane_interface.go

// Package dbuf is a generated GoMock package.
package dbuf

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataPlaneInterfaceInterface is a mock of DataPlaneInterfaceInterface interface
type MockDataPlaneInterfaceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataPlaneInterfaceInterfaceMockRecorder
}

// MockDataPlaneInterfaceInterfaceMockRecorder is the mock recorder for MockDataPlaneInterfaceInterface
type MockDataPlaneInterfaceInterfaceMockRecorder struct {
	mock *MockDataPlaneInterfaceInterface
}

// NewMockDataPlaneInterfaceInterface creates a new mock instance
func NewMockDataPlaneInterfaceInterface(ctrl *gomock.Controller) *MockDataPlaneInterfaceInterface {
	mock := &MockDataPlaneInterfaceInterface{ctrl: ctrl}
	mock.recorder = &MockDataPlaneInterfaceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataPlaneInterfaceInterface) EXPECT() *MockDataPlaneInterfaceInterfaceMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockDataPlaneInterfaceInterface) Start(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDataPlaneInterfaceInterfaceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDataPlaneInterfaceInterface)(nil).Start), arg0)
}

// Stop mocks base method
func (m *MockDataPlaneInterfaceInterface) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockDataPlaneInterfaceInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDataPlaneInterfaceInterface)(nil).Stop))
}

// SetOutputChannel mocks base method
func (m *MockDataPlaneInterfaceInterface) SetOutputChannel(arg0 chan udpPacket) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutputChannel", arg0)
}

// SetOutputChannel indicates an expected call of SetOutputChannel
func (mr *MockDataPlaneInterfaceInterfaceMockRecorder) SetOutputChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutputChannel", reflect.TypeOf((*MockDataPlaneInterfaceInterface)(nil).SetOutputChannel), arg0)
}

// Send mocks base method
func (m *MockDataPlaneInterfaceInterface) Send(arg0 udpPacket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDataPlaneInterfaceInterfaceMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDataPlaneInterfaceInterface)(nil).Send), arg0)
}
